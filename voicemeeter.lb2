[extension_name]
Voicemeeter Connect
[extension_info]
Connects Voicemeeter to Lioranboard 2.0
[insert_external]
<script src="bundle.js"></script>
[insert_command]
LB.extCommand('set volume', 3355443 , 52, {
              'Bus': ['bus', 14, '10'],
              'Volume': ['volume', 15, '0.5']
});
LB.extCommand('get volume', 3355443 , 52, {
              'Bus': ['bus', 14, ''],
              'Variable': ['variable', 14, '']
});
[insert_hook]
case "set volume":{
    tp_set_volume(LioranBoardJSON.Bus, LioranBoardJSON.Volume);
} break;
case "get volume":{
    tp_get_volume(LioranBoardJSON.Bus,LioranBoardJSON.Variable, LioranBoardJSON.FromButton);
} break;
[insert_script]
function tp_set_volume(bus, volume) {
    "use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var voicemeeter_connector_1 = require("voicemeeter-connector");
voicemeeter_connector_1.Voicemeeter.init().then(function (vm) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                // Connect to your voicemeeter client
                vm.connect();
                // Sets gain of strip 0 to -10db
                return [4 /*yield*/, vm.setStripParameter(0, voicemeeter_connector_1.StripProperties.Gain, -10)];
            case 1:
                // Sets gain of strip 0 to -10db
                _a.sent();
                // Print gain
                console.log(vm.getStripParameter(0, voicemeeter_connector_1.StripProperties.Gain));
                // Attach event handler
                vm.attachChangeEvent(function () {
                    console.log("Something changed!");
                });
                // Disconnect voicemeeter client
                setTimeout(function () {
                    vm.disconnect();
                    process.exit(0);
                }, 5000);
                return [2 /*return*/];
        }
    });
}); });
}
function tp_get_volume(bus, variable, button_ID) {
    
    
    if ( variable.includes(".") ) {
        const scopedVariable = variable.split(".");
		LB.setVariable(scopedVariable[1], log, scopedVariable[0]);
    } else {
        LB.setVariable(variable, db, buttonId = button_ID);
    }
}
[insert_over]
